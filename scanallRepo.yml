trigger:
- main

pool:
  vmImage: 'ubuntu-latest'

jobs:
- job: FetchAndScanRepos
  displayName: 'Fetch Repos from CSV and Run Gitleaks Scan'
  env:
    TOKEN: $(renovate)  # Use the PAT token

  variables:
    REPO_BASE_PATH: '$(Build.SourcesDirectory)/cloned_repos'
    repositories: []  # Empty placeholder for repositories list

  steps:

  # Step 1: Download the CSV file
  - task: DownloadBuildArtifacts@0
    inputs:
      buildType: 'specific'
      artifactName: 'your-artifact-name'
      downloadPath: '$(Build.SourcesDirectory)/repo-list'
    displayName: 'Download Repository List CSV'

  # Step 2: Parse the CSV file and populate the repositories variable
  - script: |
      echo "Reading repositories from CSV..."
      IFS=',' # Define comma as field separator
      repositories="[]"
      while read projectName repoName; do
        if [ "$projectName" != "Project Name" ]; then  # Skip header
          echo "Found repo: $projectName/$repoName"
          repositories=$(echo $repositories | jq --arg pn "$projectName" --arg rn "$repoName" '. + [{"projectName": $pn, "repoName": $rn}]')
        fi
      done < $(Build.SourcesDirectory)/repo-list/project_and_repositories.csv

      echo "##vso[task.setvariable variable=repositories;]$repositories"
    displayName: 'Parse Repositories from CSV'
  
  # Step 3: Iterate over each repository and run Gitleaks scan
  - ${{ each repo in variables.repositories }}:
    - template: path/to/gitleaks_scan_template.yaml
      parameters:
        projectName: ${{ repo.projectName }}
        repoName: ${{ repo.repoName }}
        repoPath: $(REPO_BASE_PATH)/${{ repo.repoName }}
        configPath: $(Build.SourcesDirectory)/gitleaks-config/gitleaks.toml
        outputPath: $(Build.SourcesDirectory)/gitleaks-reports/${{ repo.repoName }}
    displayName: 'Run Gitleaks Scan for ${{ repo.repoName }}'
